<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:animations="clr-namespace:WinIO.FluentWPF.Animations"
    xmlns:converters="clr-namespace:WinIO.FluentWPF.Converters" 
    xmlns:fluentWpf="clr-namespace:WinIO.FluentWPF">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="../Styles/Window.xaml" />
        <ResourceDictionary Source="../Styles/Menu.xaml" />
        <ResourceDictionary Source="../Styles/Button.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <BooleanToVisibilityConverter x:Key="booleanToVisibilityConverter" />
    <fluentWpf:AddValueConverter x:Key="addValueConverter" />
    <fluentWpf:BrushTranslationConverter x:Key="brushTranslationConverter" />
    <fluentWpf:RelativePositionConverter x:Key="relativePositionConverter" />
    <converters:RectConverter x:Key="RectConverter" />


    <Style TargetType="{x:Type fluentWpf:AcrylicWindow}" BasedOn="{StaticResource AcrylicWindowStyle}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Window}" >
                    <Border x:Name="windowBorder"
                            BorderBrush="{Binding RelativeSource={RelativeSource AncestorType=Window}, Path=BorderBrush}"
                            BorderThickness="{Binding RelativeSource={RelativeSource AncestorType=Window}, Path= BorderThickness}"
                            Background="{Binding RelativeSource={RelativeSource AncestorType=Window}, Path=Background}">
                        <ContentPresenter />
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding IsActive, RelativeSource={RelativeSource Self}}" Value="False">
                            <Setter TargetName="windowBorder" Property="Border.BorderBrush" Value="Gray" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding WindowState, RelativeSource={RelativeSource Self}}" Value="Maximized">
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="fluentWpf:AcrylicWindow.AcrylicWindowStyle" Value="None"/>
                    <Condition Property="ResizeMode" Value="CanResizeWithGrip"/>
                    <Condition Property="WindowState" Value="Normal"/>
                </MultiTrigger.Conditions>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Window}" >
                            <Border x:Name="windowBorder"
                                    BorderBrush="{Binding RelativeSource={RelativeSource AncestorType=Window}, Path=BorderBrush}"
                                    BorderThickness="{Binding RelativeSource={RelativeSource AncestorType=Window}, Path= BorderThickness}"
                                    Background="{Binding RelativeSource={RelativeSource AncestorType=Window}, Path=Background}">
                                <Grid>
                                    <ContentPresenter />
                                    <ResizeGrip HorizontalAlignment="Right" IsTabStop="False" VerticalAlignment="Bottom"/>
                                </Grid>
                            </Border>
                            <ControlTemplate.Triggers>
                                <DataTrigger Binding="{Binding IsActive, RelativeSource={RelativeSource Self}}" Value="False">
                                    <Setter TargetName="windowBorder" Property="Border.BorderBrush" Value="Gray" />
                                </DataTrigger>
                                <DataTrigger Binding="{Binding WindowState, RelativeSource={RelativeSource Self}}" Value="Maximized">
                                </DataTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type fluentWpf:ParallaxView}">
        <Setter Property="ClipToBounds" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type fluentWpf:ParallaxView}">
                    <ContentPresenter Margin="{TemplateBinding OffsetMargin}">
                        <ContentPresenter.Height>
                            <MultiBinding Converter="{StaticResource addValueConverter}">
                                <Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type fluentWpf:ParallaxView}}" Path="ActualHeight"/>
                                <Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type fluentWpf:ParallaxView}}" Path="VerticalShift"/>
                            </MultiBinding>
                        </ContentPresenter.Height>
                        <ContentPresenter.Width>
                            <MultiBinding Converter="{StaticResource addValueConverter}">
                                <Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type fluentWpf:ParallaxView}}" Path="ActualWidth"/>
                                <Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type fluentWpf:ParallaxView}}" Path="HorizontalShift"/>
                            </MultiBinding>
                        </ContentPresenter.Width>
                    </ContentPresenter>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type fluentWpf:AcrylicPanel}">
        <Setter Property="TintColor" Value="White" />
        <Setter Property="TintOpacity" Value="0.0" />
        <Setter Property="NoiseOpacity" Value="0.03" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="ClipToBounds" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type fluentWpf:AcrylicPanel}">
                    <Grid ClipToBounds="True">
                        <!-- background -->
                        <Rectangle>
                            <Rectangle.Fill>
                                <PriorityBinding>
                                    <Binding Path="Target.Background" RelativeSource="{RelativeSource AncestorType={x:Type fluentWpf:AcrylicPanel}}" />
                                    <Binding Path="Target.Fill" RelativeSource="{RelativeSource AncestorType={x:Type fluentWpf:AcrylicPanel}}" />
                                </PriorityBinding>
                            </Rectangle.Fill>
                        </Rectangle>
                        <!-- main -->
                        <Canvas>
                            <ContentControl>
                                <ContentControl.CacheMode>
                                    <BitmapCache RenderAtScale="0.2"/>
                                </ContentControl.CacheMode>
                                <Rectangle x:Name="rect"
                                           IsHitTestVisible="False"
                                           Width="{Binding Target.ActualWidth, RelativeSource={RelativeSource AncestorType={x:Type fluentWpf:AcrylicPanel}}}"
                                           Height="{Binding Target.ActualHeight, RelativeSource={RelativeSource AncestorType={x:Type fluentWpf:AcrylicPanel}}}"
                                           ClipToBounds="False">
                                    <Rectangle.Fill>
                                        <VisualBrush Stretch="None" AlignmentX="Left" AlignmentY="Top"
                                                     ViewboxUnits="Absolute"
                                                     Visual="{Binding Target, RelativeSource={RelativeSource AncestorType={x:Type fluentWpf:AcrylicPanel}}}">
                                        </VisualBrush>
                                    </Rectangle.Fill>
                                    <Rectangle.RenderTransform>
                                        <MultiBinding Converter="{StaticResource brushTranslationConverter}">
                                            <Binding Path="Target" RelativeSource="{RelativeSource AncestorType={x:Type fluentWpf:AcrylicPanel}}"/>
                                            <Binding Path="Source" RelativeSource="{RelativeSource AncestorType={x:Type fluentWpf:AcrylicPanel}}"/>
                                        </MultiBinding>
                                    </Rectangle.RenderTransform>
                                    <Rectangle.Effect>
                                        <BlurEffect Radius="100"/>
                                    </Rectangle.Effect>
                                </Rectangle>
                            </ContentControl>
                        </Canvas>

                        <ContentControl Style="{StaticResource AcrylicContentControlStyle}">
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </ContentControl>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type fluentWpf:AcrylicContextMenu}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Grid.IsSharedSizeScope" Value="True" />
        <Setter Property="HasDropShadow" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContextMenu}">
                    <ControlTemplate.Resources>
                        <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource AcrylicMenuItemStyle}" />
                    </ControlTemplate.Resources>
                    <ContentControl Style="{StaticResource AcrylicContentControlStyle}"
                                    BorderBrush="{DynamicResource SystemAltMediumColorBrush}">
                        <Grid>
                            <fluentWpf:DropShadowPanel Margin="29,0,0,0" ShadowMode="Outer" ShadowOpacity="0.3"
                                                   HorizontalAlignment="Stretch" VerticalAlignment="Stretch" BlurRadius="7">
                                <Rectangle Fill="{DynamicResource SystemAltLowColorBrush}"/>
                            </fluentWpf:DropShadowPanel>
                            <ScrollViewer x:Name="SubMenuScrollViewer"
                                          Margin="2"
                                          Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
                                <ItemsPresenter x:Name="ItemsPresenter"
                                                KeyboardNavigation.DirectionalNavigation="Cycle"
                                                Grid.IsSharedSizeScope="True"
                                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" KeyboardNavigation.TabNavigation="Cycle"/>
                            </ScrollViewer>
                        </Grid>
                    </ContentControl>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type fluentWpf:AcrylicPopup}">
        <Setter Property="AllowsTransparency" Value="True" />
        <!--<Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:AcrylicPopup}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>-->
    </Style>

    <Style TargetType="{x:Type fluentWpf:AcrylicToolTip}" BasedOn="{StaticResource {x:Type ToolTip}}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <!--<Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:AcrylicToolTip}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>-->
    </Style>

    <Style TargetType="{x:Type fluentWpf:RevealPanel}">
        <Setter Property="Background" Value="#80808080" />
        <Setter Property="BorderBrush" Value="{DynamicResource SystemBaseMediumHighColorBrush}" />
        <Setter Property="BorderThickness" Value="2" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="UseLayoutRounding" Value="True" />
        
        <Setter Property="fluentWpf:RevealElement.MouseOverForeground" Value="{DynamicResource SystemBaseHighColorBrush}" />
        <Setter Property="fluentWpf:RevealElement.MouseOverBackground" Value="#80808080" />
        <Setter Property="fluentWpf:RevealElement.MouseOverBorderOpacity" Value="0.1" />
        <Setter Property="fluentWpf:RevealElement.PressBorderOpacity" Value="0.2" />
        <Setter Property="fluentWpf:RevealElement.BorderRadius" Value="0" />
        <Setter Property="fluentWpf:RevealElement.PressTintBrush" Value="{DynamicResource SystemBaseLowColorBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type fluentWpf:RevealPanel}">
                    <Grid ClipToBounds="True">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="backgroundBorder"
                                                         To="0.0" Duration="0:0:0.600">
                                            <DoubleAnimation.EasingFunction>
                                                <CubicEase EasingMode="EaseOut"/>
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                        <DoubleAnimation Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="pressLight"
                                                         To="0" Duration="0:0:0.100">
                                            <DoubleAnimation.EasingFunction>
                                                <CubicEase EasingMode="EaseOut"/>
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="backgroundBorder"
                                                         To="0.5" Duration="0:0:0.600">
                                            <DoubleAnimation.EasingFunction>
                                                <CubicEase EasingMode="EaseOut"/>
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>

                                        <DoubleAnimation Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="pressLight"
                                                         To="0" Duration="0:0:0.200">
                                            <DoubleAnimation.EasingFunction>
                                                <CubicEase EasingMode="EaseOut"/>
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>

                                        <DoubleAnimation Storyboard.TargetProperty="(RadialGradientBrush.RadiusX)" Storyboard.TargetName="brush"
                                                         To="200" Duration="0:0:0.200">
                                            <DoubleAnimation.EasingFunction>
                                                <SineEase EasingMode="EaseInOut"/>
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                        <DoubleAnimation Storyboard.TargetProperty="(RadialGradientBrush.RadiusY)" Storyboard.TargetName="brush"
                                                         To="200" Duration="0:0:0.200">
                                            <DoubleAnimation.EasingFunction>
                                                <SineEase EasingMode="EaseInOut"/>
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="backgroundBorder"
                                                         To="0.5" Duration="0:0:0.600">
                                            <DoubleAnimation.EasingFunction>
                                                <CubicEase EasingMode="EaseOut"/>
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>

                                        <DoubleAnimation Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="pressLight"
                                                         To="1" Duration="0:0:0.100">
                                            <DoubleAnimation.EasingFunction>
                                                <CubicEase EasingMode="EaseOut"/>
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                        <DoubleAnimation Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="pressLight"
                                                         To="0" BeginTime="0:0:0.150" Duration="0:0:1.500">
                                            <DoubleAnimation.EasingFunction>
                                                <CubicEase EasingMode="EaseOut"/>
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>

                                        <DoubleAnimation Storyboard.TargetProperty="(RadialGradientBrush.RadiusX)" Storyboard.TargetName="brush"
                                                         From="100" To="50" Duration="0:0:0.100">
                                            <DoubleAnimation.EasingFunction>
                                                <CubicEase EasingMode="EaseOut"/>
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                        <DoubleAnimation Storyboard.TargetProperty="(RadialGradientBrush.RadiusX)" Storyboard.TargetName="brush"
                                                         To="200" BeginTime="0:0:0.150" Duration="0:0:1.500">
                                            <DoubleAnimation.EasingFunction>
                                                <SineEase EasingMode="EaseInOut"/>
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                        <DoubleAnimation Storyboard.TargetProperty="(RadialGradientBrush.RadiusY)" Storyboard.TargetName="brush"
                                                         From="100" To="50" Duration="0:0:0.100">
                                            <DoubleAnimation.EasingFunction>
                                                <CubicEase EasingMode="EaseOut"/>
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                        <DoubleAnimation Storyboard.TargetProperty="(RadialGradientBrush.RadiusY)" Storyboard.TargetName="brush"
                                                         To="200" BeginTime="0:0:0.150" Duration="0:0:1.500">
                                            <DoubleAnimation.EasingFunction>
                                                <SineEase EasingMode="EaseInOut"/>
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                        <DoubleAnimation Storyboard.TargetProperty="Offset" Storyboard.TargetName="offset"
                                                         To="0" Duration="0:0:0.000">
                                            <DoubleAnimation.EasingFunction>
                                                <SineEase EasingMode="EaseInOut"/>
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                        <DoubleAnimation Storyboard.TargetProperty="Offset" Storyboard.TargetName="offset"
                                                         From="0" To="0.8" BeginTime="0:0:0.150" Duration="0:0:1.500">
                                            <DoubleAnimation.EasingFunction>
                                                <SineEase EasingMode="EaseOut"/>
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>

                                        <DoubleAnimation Storyboard.TargetProperty="Opacity" Storyboard.TargetName="brush"
                                                         To="0" BeginTime="0:0:0.200" Duration="0:0:2.000">
                                            <DoubleAnimation.EasingFunction>
                                                <SineEase EasingMode="EaseInOut"/>
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <animations:BrushAnimation Storyboard.TargetProperty="(TextElement.Foreground)" Storyboard.TargetName="contentPresenter"
                                                                  Duration="0:0:0.100" AutoReverse="False">
                                            <animations:BrushAnimation.To>
                                                <SolidColorBrush Color="#FF838383"/>
                                            </animations:BrushAnimation.To>
                                            <animations:BrushAnimation.EasingFunction>
                                                <SineEase EasingMode="EaseInOut"/>
                                            </animations:BrushAnimation.EasingFunction>
                                        </animations:BrushAnimation>
                                        <DoubleAnimation Storyboard.TargetProperty="Opacity" Storyboard.TargetName="border"
                                                         To="0" Duration="0:0:0.100" AutoReverse="False">
                                            <DoubleAnimation.EasingFunction>
                                                <SineEase EasingMode="EaseInOut"/>
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        
                        <Border x:Name="background" Background="{TemplateBinding Background}"
                                CornerRadius="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=fluentWpf:RevealPanel}, Path=(fluentWpf:RevealElement.BorderRadius)}"/>
                        <Border x:Name="pressTintLayer"
                                Background="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=fluentWpf:RevealPanel}, Path=(fluentWpf:RevealElement.PressTintBrush)}"
                                CornerRadius="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=fluentWpf:RevealPanel}, Path=(fluentWpf:RevealElement.BorderRadius)}"
                                Visibility="Hidden"/>
                        <Border x:Name="backgroundBorder"
                                Opacity="0"
                                Visibility="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=fluentWpf:RevealPanel}, Path=(fluentWpf:RevealElement.IsHoverLightEnabled), Converter={StaticResource booleanToVisibilityConverter}}"
                                CornerRadius="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=fluentWpf:RevealPanel}, Path=(fluentWpf:RevealElement.BorderRadius)}">
                            <Grid ClipToBounds="True">
                                <Border x:Name="mouseoverLight" Background="{fluentWpf:RevealBrush Color=White, Size = 300,Opacity=0.2}"
                                        CornerRadius="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=fluentWpf:RevealPanel}, Path=(fluentWpf:RevealElement.BorderRadius)}"/>
                                <Rectangle x:Name="pressLight" >
                                    <Rectangle.Clip>
                                        <RectangleGeometry RadiusX="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=fluentWpf:RevealPanel}, Path=(fluentWpf:RevealElement.BorderRadius)}"
                                                           RadiusY="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=fluentWpf:RevealPanel}, Path=(fluentWpf:RevealElement.BorderRadius)}">
                                            <RectangleGeometry.Rect>
                                                <MultiBinding Converter="{StaticResource RectConverter}">
                                                    <Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Rectangle}}" Path="ActualWidth"/>
                                                    <Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Rectangle}}" Path="ActualHeight"/>
                                                </MultiBinding>
                                            </RectangleGeometry.Rect>
                                        </RectangleGeometry>
                                    </Rectangle.Clip>
                                    <Rectangle.Fill>
                                        <RadialGradientBrush x:Name="brush" MappingMode="Absolute" RadiusY="200" RadiusX="200">
                                            <RadialGradientBrush.Center>
                                                <MultiBinding Converter="{StaticResource relativePositionConverter}">
                                                    <Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Rectangle}}" Path="(fluentWpf:PointerTracker.RootObject)"/>
                                                    <Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Rectangle}}"/>
                                                    <Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Rectangle}}" Path="(fluentWpf:PointerTracker.Position)" />
                                                </MultiBinding>
                                            </RadialGradientBrush.Center>
                                            <RadialGradientBrush.GradientOrigin>
                                                <MultiBinding Converter="{StaticResource relativePositionConverter}">
                                                    <Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Rectangle}}" Path="(fluentWpf:PointerTracker.RootObject)"/>
                                                    <Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Rectangle}}"/>
                                                    <Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Rectangle}}" Path="(fluentWpf:PointerTracker.Position)" />
                                                </MultiBinding>
                                            </RadialGradientBrush.GradientOrigin>
                                            <GradientStop Color="Transparent" Offset="0"/>
                                            <GradientStop x:Name="offset" Color="#88FFFFFF" Offset="0.5"/>
                                            <GradientStop Color="Transparent" Offset="1"/>
                                        </RadialGradientBrush>
                                    </Rectangle.Fill>
                                </Rectangle>
                            </Grid>
                        </Border>

                        <!-- Content -->
                        <Border BorderBrush="{x:Null}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=fluentWpf:RevealPanel}, Path=(fluentWpf:RevealElement.BorderRadius)}">
                            <ContentPresenter x:Name="contentPresenter" Focusable="False"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              Margin="{TemplateBinding Padding}" RecognizesAccessKey="True"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Border>

                        <!-- MouseOver border -->
                        <Grid x:Name="border">
                            <Border x:Name="borderMouseOver"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    Opacity="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=fluentWpf:RevealPanel}, Path=(fluentWpf:RevealElement.BorderOpacity)}"
                                    CornerRadius="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=fluentWpf:RevealPanel}, Path=(fluentWpf:RevealElement.BorderRadius)}"/>

                            <Border BorderBrush="{TemplateBinding BorderBrush}"
                                    OpacityMask="{fluentWpf:RevealBrush Color=White,Size=70,Opacity=0.3}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    CornerRadius="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=fluentWpf:RevealPanel}, Path=(fluentWpf:RevealElement.BorderRadius)}"/>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="background" Property="Background"
                                    Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=fluentWpf:RevealPanel}, Path=(fluentWpf:RevealElement.MouseOverBackground)}"/>
                            <Setter TargetName="contentPresenter" Property="TextBlock.Foreground"
                                    Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=fluentWpf:RevealPanel}, Path=(fluentWpf:RevealElement.MouseOverForeground)}"/>
                            <Setter TargetName="borderMouseOver" Property="Opacity"
                                    Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=fluentWpf:RevealPanel}, Path=(fluentWpf:RevealElement.MouseOverBorderOpacity)}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="pressTintLayer" Property="Visibility" Value="Visible" />
                            <Setter TargetName="borderMouseOver" Property="Opacity"
                                    Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=fluentWpf:RevealPanel}, Path=(fluentWpf:RevealElement.PressBorderOpacity)}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MessageBoxButtonBaseStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource ButtonRevealStyle}">
        <Setter Property="MinWidth" Value="88" />
        <Setter Property="Margin" Value="4" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Padding" Value="3" />
        <Setter Property="BorderThickness" Value="1" />
    </Style>

    <Style TargetType="{x:Type fluentWpf:AcrylicMessageBox}" BasedOn="{StaticResource {x:Type fluentWpf:AcrylicWindow}}">
        <Setter Property="Background" Value="{DynamicResource SystemAltMediumColorBrush}" />
        <Setter Property="MinWidth" Value="154" />
        <Setter Property="MinHeight" Value="140" />
        <Setter Property="ResizeMode" Value="NoResize" />
        <Setter Property="ShowInTaskbar" Value="False" />
        <Setter Property="SizeToContent" Value="WidthAndHeight" />
        <Setter Property="AcrylicWindowStyle" Value="NoIcon" />
        <Setter Property="ExtendViewIntoTitleBar" Value="True" />
        <Setter Property="Content">
            <Setter.Value>
                <Grid fluentWpf:PointerTracker.Enabled="True"
                      Background="Transparent">
                    <Grid.RowDefinitions>
                        <RowDefinition />
                        <RowDefinition Height="42" />
                    </Grid.RowDefinitions>
                    <!--  メッセージ本文  -->
                    <fluentWpf:DropShadowPanel Grid.Row="0"
                                           ShadowMode="Outer"
                                           ShadowOpacity="0.3"
                                           Margin="0,-30,0,0"
                                           BlurRadius="6"
                                           Background="{DynamicResource SystemAltLowColorBrush}">
                        <Grid Margin="0,30,0,0">
                            <Grid Height="30"
                                  VerticalAlignment="Top">
                                <TextBlock x:Name="captionText"
                                           Margin="8,0,0,0"
                                           Text="{Binding Title, RelativeSource={RelativeSource AncestorType=Window}}"
                                           VerticalAlignment="Center"
                                           TextWrapping="NoWrap" TextTrimming="CharacterEllipsis"/>
                            </Grid>
                            <TextBlock Margin="12,56,39,27"
                               HorizontalAlignment="Left"
                               VerticalAlignment="Top"
                               Text="{Binding RelativeSource={RelativeSource AncestorType=Window}, Path=Message}"
                               TextOptions.TextFormattingMode="Display">
                                <TextBlock.Style>
                                    <Style TargetType="{x:Type TextBlock}">
                                        <!--  メッセージが空の時は、TextBlockを非表示にする  -->
                                        <Style.Triggers>
                                            <Trigger Property="Text" Value="{x:Null}">
                                                <Setter Property="Visibility" Value="Collapsed" />
                                            </Trigger>
                                            <Trigger Property="Text" Value="">
                                                <Setter Property="Visibility" Value="Collapsed" />
                                            </Trigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBlock.Style>
                            </TextBlock>
                        </Grid>
                    </fluentWpf:DropShadowPanel>

                    <!--  メッセージボックス下部のボタン領域  -->
                    <Grid x:Name="PART_ButtonsArea"
                            Grid.Row="1"
                            Margin="38,0,5,0" HorizontalAlignment="Right">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Grid.Resources>
                            <Style TargetType="{x:Type Button}" BasedOn="{StaticResource MessageBoxButtonBaseStyle}" />
                        </Grid.Resources>
                        <Button x:Name="PART_OkButton"
                                Content="{Binding RelativeSource={RelativeSource AncestorType=Window}, Path=OkButtonContent}"
                                Visibility="Collapsed" />
                        <Button x:Name="PART_YesButton"
                                Grid.Column="1"
                                Content="{Binding RelativeSource={RelativeSource AncestorType=Window}, Path=YesButtonContent}"
                                Visibility="Collapsed" />
                        <Button x:Name="PART_NoButton"
                                Grid.Column="2"
                                Content="{Binding RelativeSource={RelativeSource AncestorType=Window}, Path=NoButtonContent}"
                                Visibility="Collapsed" />
                        <Button x:Name="PART_CancelButton"
                                Grid.Column="3"
                                Content="{Binding RelativeSource={RelativeSource AncestorType=Window}, Path=CancelButtonContent}"
                                Visibility="Collapsed" />
                    </Grid>
                </Grid>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>
